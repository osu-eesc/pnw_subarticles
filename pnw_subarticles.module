<?php
/**
* @file
* Code for the PNW Subarticles feature.
*/

include_once 'pnw_subarticles.features.inc';


/**
* Implements hook_menu().
*/
function pnw_subarticles_menu() {
  $items = array();
  $items['admin/content/add_subarticles'] = array(
    'title' => 'Update Handbook sub-articles',
    'description' => 'Updates or adds content to handbook subarticle nodes.',
    'page callback' => 'drupal_get_form',
    'access callback' => TRUE,
    'page arguments' => array('pnw_subarticles_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
* @desc pnw_subarticles configuration
*/
function pnw_subarticles_admin_settings() {
  // get list of articles and populate select element
  $results = db_query("SELECT nid, title FROM {node} WHERE TYPE = 'article' AND `status` = 1 ORDER BY title");
  $options = array();
  foreach ($results as $result) {
    $options[$result->nid] = $result->title . ' [node: ' . $result->nid . ']';
  }

  $form['parentid'] = array(
    '#type' => 'select',
    '#title' => t('Parent article'),
    '#options' => $options,
    '#description' => t('Choose the parent article that the sub-articles should reference.'),
    '#required' => TRUE,
  );
  $form['content'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#description' => t('Copy and paste InDesign exported html. Titles need to be wrapped in h3 tags'),
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update sub-pages'),
  );
  return $form;
}

/**
* Implements hook_theme().
*/
function pnw_subarticles_theme() {
  return array(
    'views_view_field__article_subpages' => array(
      'template' => 'views-view-field--article-subpages',
      'path' => drupal_get_path('module', 'pnw_subarticles') . '/theme',
      'arguments' => array(
        'view' => NULL,
        'field' => NULL,
        'row' => NULL,
      ),
      'original hook' => 'views_view_field',
      'preprocess functions' => array(
        'template_preprocess',
        'template_preprocess_views_view_field',
      ),
    ),
  );
}


/**
* @desc pnw_subarticles settings submission
*/
function pnw_subarticles_admin_settings_submit($form, &$form_state) {
  
  module_load_include('inc', 'node', 'node.pages');

  $text = $form_state['values']['content'];
  $parentid = $form_state['values']['parentid'];
  //$styled_title = $form_state['values']['parentid'];
  $text = str_replace(array("\xe2\x80\x98", "\xe2\x80\x99", "\xe2\x80\x9c", "\xe2\x80\x9d", "\xe2\x80\x93", "\xe2\x80\x94", "\xe2\x80\xa6"), array("'", "'", '"', '"', '-', '-', '&hellip;'), $text);
  $text = str_replace(array(chr(145), chr(146), chr(147), chr(148), chr(150), chr(151), chr(133)), array("'", "'", '"', '"', '-', '-', '&hellip;'), $text);
  $text = str_replace('&nbsp;', ' ', $text);
  $text = trim($text);
  

  $handbook_data = split_text($text);

  // Load existing nodes
  //$results = db_query("SELECT nid, title FROM {node} WHERE type IN ('article', 'page', 'subarticle', 'pdf') ORDER BY title");
  $results = db_query("SELECT n.nid, n.title FROM {node} n, {field_data_field_parent_article_reference} p WHERE  n.nid = p.entity_id AND p.field_parent_article_reference_nid = " . $form_state['values']['parentid'] . "  ORDER BY n.title");

  //dpm($results,'results query');

  $existing_nodes = array();

  $rowCount = 0;
  foreach ($results as $result) {
    $existing_nodes[$result->nid] = $result->title;
    $rowCount++;
  }


  //dpm($rowCount,'rows in line 101');
  //dpm($rowCount,'rows in line 102');

  //if (!empty($existing_nodes)) {

    foreach ($handbook_data as $new_content) {
      $new_titles[] = strip_tags(trim($new_content['title']));
      $new_content['parentid'] = $parentid;
      $new_content['styled_title'] = $new_content['title']; 
      $crop = explode('-',$new_content['title']); // seaparate out the crop name from title
      $new_content['crop'] = $crop[0]; 
      $new_content['pest'] = $crop[1]; 
      if (in_array(strip_tags(trim($new_content['title'])), $existing_nodes)) {
        $update_handbook_data[] = $new_content;
      }
      else {
        $new_handbook_data[] = $new_content;
      }
    } // foreach
  
    $not_changed = array_diff($existing_nodes, $new_titles);
    
    if (!empty($update_handbook_data)) {

      // Update a node
      foreach ($update_handbook_data as $update_content) {
        $query = "SELECT n.nid FROM {node} n, {field_data_field_parent_article_reference} p WHERE n.nid = p.entity_id AND n.type = 'subarticle' AND n.title = '" . strip_tags($update_content['title']) . "'";

        $result = db_query($query)->fetchField();
      
        $query = new EntityFieldQuery();

        $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'subarticle')
        ->propertyCondition('nid', $result)
        ->range(0, 1);
       
        $result = $query->execute();

        $nid = array_keys($result['node']); // sets the nid to the current value in loop
        
        $nid = $nid[0]; // Drupal needs this to be a string

        $node = node_load($nid); // load the node

        // add see also links if match
        $pattern = '/(?<=<p class="See-also-link">)(.*?)(?=<\/p>)/';
        preg_match_all($pattern, $update_content['body'], $matches);

        //dpm($matches, 'matched line 156');
        
        if (count($matches) > 0) {
          
          foreach ($matches[1] as $value) {
          
            $new_value = trim(strip_tags($value));
            $new_value = preg_replace('/\s*-+\s*/', '-', $new_value);
            $link_nid = array_search($new_value, $existing_nodes);

            if ($link_nid) {
              $link_path = 'node/' . $link_nid;
              $see_also_link = l($value, $link_path, array('html' => TRUE));
              $update_content['body'] = str_replace($value, $see_also_link, $update_content['body']);

            }

          } // foreach ($matches[1] as $value)

        } // count($matches)
        $croptitle = strip_tags($update_content['title']);
        $crop = explode('-',$croptitle); // seaparate out the crop name from title
        $update_content['crop'] = $crop[0]; 
        $update_content['pest'] = $crop[1]; 

        //dpm( debug_backtrace() );

        node_object_prepare($node);

        // set tne new values
        $node->type = 'subarticle';
        $node->field_body[LANGUAGE_NONE][0]['value'] = $update_content['body'];
        $node->field_parent_article_reference[LANGUAGE_NONE][0]['nid'] = $update_content['parentid'];
        $node->field_styled_title[LANGUAGE_NONE][0]['value'] = trim($update_content['styled_title']);
        $node->field_styled_title[LANGUAGE_NONE][0]['format'] = 'styled_page_title';
        $node->field_insect_crop[LANGUAGE_NONE][0]['value'] = trim($update_content['crop']);
        $node->field_insect_pest[LANGUAGE_NONE][0]['value'] = trim($update_content['pest']);

        $node->revision = 1;
        //$node->revision_uid = 1;
        $node->log = 'This node was updated via pnw_subarticles module at ' . date('c');

        if ($node = node_submit($node)) {
          node_save($node);
          $updated_nodes[] = $node->title;
        }
        else {
          $err[] = $result->nid;
        }

      } // foreach

    } // !empty($update_handbook_data)

  //} //!empty($existing_nodes)


  if (!empty($new_handbook_data)) {

    // Create a new node
    foreach ($new_handbook_data as $new_content) {

      $croptitle = strip_tags($new_content['title']);
      $crop = explode('-',$croptitle); // seaparate out the crop name from title
      $new_content['crop'] = $crop[0]; 

      // add see also links if match
      $pattern = '/(?<=<p class="See-also-link">)(.*?)(?=<\/p>)/';
      preg_match_all($pattern, $new_content['body'], $matches);
      if (count($matches) > 0) {

        foreach ($matches[1] as $value) {
          
          $new_value = trim(strip_tags($value));
          $new_value = preg_replace('/\s*-+\s*/', '-', $new_value);
          $link_nid = array_search($new_value, $existing_nodes);
          if ($link_nid) {
            $link_path = 'node/' . $link_nid;
            $see_also_link = l($value, $link_path, array('html' => TRUE));
            $new_content['body'] = str_replace($value, $see_also_link, $new_content['body']);
          }

        } // foreach ($matches[1] as $value)

      } //(count($matches) > 0)

      $node = new stdClass(); // create new node object
      $node->type = 'subarticle';
      $node->language = LANGUAGE_NONE;
      $node->uid = 1;

      //node_object_prepare($node);
      $node->title = trim(strip_tags($new_content['title']));
      $node->field_body[LANGUAGE_NONE][0]['value'] = $new_content['body'];
      $node->field_body[LANGUAGE_NONE][0]['format'] = 'full_html';
      $node->field_parent_article_reference[LANGUAGE_NONE][0]['nid'] = $new_content['parentid'];
      $node->field_styled_title[LANGUAGE_NONE][0]['value'] = trim($new_content['styled_title']);
      $node->field_styled_title[LANGUAGE_NONE][0]['format'] = 'styled_page_title';
      $node->field_insect_crop[LANGUAGE_NONE][0]['value'] = trim($new_content['crop']);
      $node->field_insect_pest[LANGUAGE_NONE][0]['value'] = trim($new_content['pest']);
      $node->log = 'This node was created via pnw_subarticles module at ' . date('c');

      node_save($node);
      $new_nodes[] = $node->title;

    } // foreach

  } //!empty($new_handbook_data


  if (!is_dir('./' . variable_get('file_public_path', conf_path()) . 'update_logs/')) {
    mkdir('./' . variable_get('file_public_path', conf_path()) . 'update_logs/');
  }

  $logfile = './' . variable_get('file_public_path', conf_path()) . 'update_logs/' . date('Y-m-d-h-s-a') . '_parentnode_' . $parentid . '_update_log.txt';
  $handle = fopen($logfile, "a");

  fwrite($handle, "\n\n");
  if (!empty($new_nodes)) {
    fwrite($handle, "##### Newly created content #####\n");
    foreach ($new_nodes as $new_title) {
      fwrite($handle, $new_title . "\n");
    }
  }
  else {
    fwrite($handle, "\n##### Newly created content #####\n[NONE]\n");
  }
  if (!empty($updated_nodes)) {
    fwrite($handle, "\n##### Updated content #####\n");
    foreach ($updated_nodes as $new_title) {
      fwrite($handle, $new_title . "\n");
    }
  }
  else {
    fwrite($handle, "\n##### Updated content #####\n[NONE]\n");
  }
  if (!empty($not_changed)) {
    fwrite($handle, "\n##### Content not changed #####\n");
    foreach ($not_changed as $new_title) {
      fwrite($handle, $new_title . "\n");
    }
  }
  else {
    fwrite($handle, "\n##### Content not changed #####\n[NONE]\n");
  }
  fclose($handle);

  $message = 'PNW Handbook Sub-article content has been updated. <a target="_blank" href="' . base_path() . variable_get('file_public_path', conf_path()) . 'update_logs/' . date('Y-m-d-h-s-a') . '_parentnode_' . $parentid . '_update_log.txt">View update log</a>.';
  drupal_set_message(filter_xss(t($message)));
}

/***********************************************************************************************************************************************/

function split_text($text) {
  preg_match('/<h3(.*?)>(.*?)<\/h3>/mi', $text, $matches);
  $count = 0;
  if (isset($matches['0'])) {
    if (substr($text, 0, strlen($matches['0'])) != $matches['0']) { //If $text does not start with an <h3>...</h3> tag
      $first_section['title'] = t("Page 1");
      $first_section['body'] = substr($text, 0, strpos($text, $matches['0']));
      $first_section['parentid'] = $parentid;
      $text = substr($text, strpos($text, $matches['0']));
      $section[] = $first_section;
      $count = 1;
    }
    elseif ($matches['2'] == "") { //If $text starts with <h3></h3>
      $first_section['title'] = "Page 1";
      $first_section['parentid'] = $parentid;
      $text = substr($text, strlen($matches['0']));
      preg_match('/<h3(.*?)>(.*?)<\/h3>/mi', $text, $matches);
      if (isset($matches['0'])) {
        $first_section['body'] = substr($text, 0, strpos($text, $matches['0']));
        $text = substr($text, strpos($text, $matches['0']));
      }
      else {
        $first_section['body'] = $text;
        $text = '';
      }
      $section[] = $first_section;
      $count = 1;
    }

    preg_match('/<h3(.*?)>(.*?)<\/h3>/mi', $text, $matches);
    while (isset($matches['2'])):
      $count ++;
      preg_match('/<h3(.*?)>(.*?)<\/h3>/mi', $text, $matches);
      $new_section['title'] = $matches['2'] != "" ? preg_replace('/\s*-+\s*/', '-', $matches['2']) : "Page $count";
      //$new_section['parentid'] = $form_state['values']['parentid'];
      $text = substr($text, strlen($matches['0']));
      preg_match('/<h3(.*?)>(.*?)<\/h3>/mi', $text, $matches);
      if (isset($matches['0'])) {
        $new_section['body'] = substr($text, 0, strpos($text, $matches['0']));
        $text = substr($text, strpos($text, $matches['0']));
      }
      else {
        $new_section['body'] = $text;
        $text = '';
      }
      $section[] = $new_section;
    endwhile;

  }
  else {
    // No matches, send back full text
    $section['0']['title'] = t("Page 1");
    $section['0']['body'] = $text;
    $section['0']['parentid'] = $parentid;
  }
  return $section;
}

function _drupal_execute($form_id, &$form_state) {
  $args = func_get_args();

  // Make sure $form_state is passed around by reference.
  $args[1] = &$form_state;
  
  $form = call_user_func_array('drupal_retrieve_form', $args);
  $form['#post'] = $form_state['values'];
  drupal_prepare_form($form_id, $form, $form_state);
  _drupal_process_form($form_id, $form, $form_state);
}

function _drupal_process_form($form_id, &$form, &$form_state) {
  $form_state['values'] = array();

  $form = form_builder($form_id, $form, $form_state);
  // Only process the form if it is programmed or the form_id coming
  // from the POST data is set and matches the current form_id.
  if ((!empty($form['#programmed'])) || (!empty($form['#post']) && (isset($form['#post']['form_id']) && ($form['#post']['form_id'] == $form_id)))) {
    $form_state['process_input'] = TRUE;
    _drupal_validate_form($form_id, $form, $form_state);

    // form_clean_id() maintains a cache of element IDs it has seen,
    // so it can prevent duplicates. We want to be sure we reset that
    // cache when a form is processed, so scenerios that result in
    // the form being built behind the scenes and again for the
    // browser don't increment all the element IDs needlessly.
    form_clean_id(NULL, TRUE);

    if ((!empty($form_state['submitted'])) && !form_get_errors() && empty($form_state['rebuild'])) {
      $form_state['redirect'] = NULL;
      form_execute_handlers('submit', $form, $form_state);

      // We'll clear out the cached copies of the form and its stored data
      // here, as we've finished with them. The in-memory copies are still
      // here, though.
      if (variable_get('cache', CACHE_DISABLED) == CACHE_DISABLED && !empty($form_state['values']['form_build_id'])) {
        cache_clear_all('form_' . $form_state['values']['form_build_id'], 'cache_form');
        cache_clear_all('storage_' . $form_state['values']['form_build_id'], 'cache_form');
      }

      // If batches were set in the submit handlers, we process them now,
      // possibly ending execution. We make sure we do not react to the batch
      // that is already being processed (if a batch operation performs a
      // drupal_execute).
      if ($batch =& batch_get() && !isset($batch['current_set'])) {
        // The batch uses its own copies of $form and $form_state for
        // late execution of submit handers and post-batch redirection.
        $batch['form'] = $form;
        $batch['form_state'] = $form_state;
        $batch['progressive'] = !$form['#programmed'];
        batch_process();
        // Execution continues only for programmatic forms.
        // For 'regular' forms, we get redirected to the batch processing
        // page. Form redirection will be handled in _batch_finished(),
        // after the batch is processed.
      }

      // If no submit handlers have populated the $form_state['storage']
      // bundle, and the $form_state['rebuild'] flag has not been set,
      // we're finished and should redirect to a new destination page
      // if one has been set (and a fresh, unpopulated copy of the form
      // if one hasn't). If the form was called by drupal_execute(),
      // however, we'll skip this and let the calling function examine
      // the resulting $form_state bundle itself.
      if (!$form['#programmed'] && empty($form_state['rebuild']) && empty($form_state['storage'])) {
        drupal_redirect_form($form, $form_state['redirect']);
      }
    }
  }
}

function _drupal_validate_form($form_id, $form, &$form_state) {
  $validated_forms = array();

  if (isset($validated_forms[$form_id])) {
    return;
  }

  // If the session token was set by drupal_prepare_form(), ensure that it
  // matches the current user's session.
  if (isset($form['#token'])) {
    if (!drupal_valid_token($form_state['values']['form_token'], $form['#token'])) {
      // Setting this error will cause the form to fail validation.
      form_set_error('form_token', t('Validation error, please try again. If this error persists, please contact the site administrator.'));
    }
  }

  _form_validate($form, $form_state, $form_id);
  $validated_forms[$form_id] = TRUE;
}